// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace BeefDefine.FlatBufferSchema
{

using global::System;
using global::BeefDefine.FlatBuffers;

public struct BeefMapObject : IFlatbufferObject
{
    private Table __p;
    public ByteBuffer ByteBuffer
    {
        get
        {
            return __p.bb;
        }
    }
    public static BeefMapObject GetRootAsBeefMapObject(ByteBuffer _bb)
    {
        return GetRootAsBeefMapObject(_bb, new BeefMapObject());
    }
    public static BeefMapObject GetRootAsBeefMapObject(ByteBuffer _bb, BeefMapObject obj)
    {
        return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb));
    }
    public void __init(int _i, ByteBuffer _bb)
    {
        __p.bb_pos = _i;
        __p.bb = _bb;
    }
    public BeefMapObject __assign(int _i, ByteBuffer _bb)
    {
        __init(_i, _bb);
        return this;
    }

    public BuildingData ? BuildingDatas(int j)
    {
        int o = __p.__offset(4);
        return o != 0 ? (BuildingData ?)(new BuildingData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null;
    }
    public int BuildingDatasLength
    {
        get
        {
            int o = __p.__offset(4);
            return o != 0 ? __p.__vector_len(o) : 0;
        }
    }
    public RoadData ? RoadDatas(int j)
    {
        int o = __p.__offset(6);
        return o != 0 ? (RoadData ?)(new RoadData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null;
    }
    public int RoadDatasLength
    {
        get
        {
            int o = __p.__offset(6);
            return o != 0 ? __p.__vector_len(o) : 0;
        }
    }
    public NodeData ? NodeDatas(int j)
    {
        int o = __p.__offset(8);
        return o != 0 ? (NodeData ?)(new NodeData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null;
    }
    public int NodeDatasLength
    {
        get
        {
            int o = __p.__offset(8);
            return o != 0 ? __p.__vector_len(o) : 0;
        }
    }
    public StringDictionary ? Info
    {
        get
        {
            int o = __p.__offset(10);
            return o != 0 ? (StringDictionary ?)(new StringDictionary()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null;
        }
    }

    public static Offset<BeefMapObject> CreateBeefMapObject(FlatBufferBuilder builder,
            VectorOffset BuildingDatasOffset = default(VectorOffset),
            VectorOffset RoadDatasOffset = default(VectorOffset),
            VectorOffset NodeDatasOffset = default(VectorOffset),
            Offset<StringDictionary> InfoOffset = default(Offset<StringDictionary>))
    {
        builder.StartObject(4);
        BeefMapObject.AddInfo(builder, InfoOffset);
        BeefMapObject.AddNodeDatas(builder, NodeDatasOffset);
        BeefMapObject.AddRoadDatas(builder, RoadDatasOffset);
        BeefMapObject.AddBuildingDatas(builder, BuildingDatasOffset);
        return BeefMapObject.EndBeefMapObject(builder);
    }

    public static void StartBeefMapObject(FlatBufferBuilder builder)
    {
        builder.StartObject(4);
    }
    public static void AddBuildingDatas(FlatBufferBuilder builder, VectorOffset BuildingDatasOffset)
    {
        builder.AddOffset(0, BuildingDatasOffset.Value, 0);
    }
    public static VectorOffset CreateBuildingDatasVector(FlatBufferBuilder builder, Offset<BuildingData>[] data)
    {
        builder.StartVector(4, data.Length, 4);

        for (int i = data.Length - 1; i >= 0; i--)
        {
            builder.AddOffset(data[i].Value);
        }

        return builder.EndVector();
    }
    public static void StartBuildingDatasVector(FlatBufferBuilder builder, int numElems)
    {
        builder.StartVector(4, numElems, 4);
    }
    public static void AddRoadDatas(FlatBufferBuilder builder, VectorOffset RoadDatasOffset)
    {
        builder.AddOffset(1, RoadDatasOffset.Value, 0);
    }
    public static VectorOffset CreateRoadDatasVector(FlatBufferBuilder builder, Offset<RoadData>[] data)
    {
        builder.StartVector(4, data.Length, 4);

        for (int i = data.Length - 1; i >= 0; i--)
        {
            builder.AddOffset(data[i].Value);
        }

        return builder.EndVector();
    }
    public static void StartRoadDatasVector(FlatBufferBuilder builder, int numElems)
    {
        builder.StartVector(4, numElems, 4);
    }
    public static void AddNodeDatas(FlatBufferBuilder builder, VectorOffset NodeDatasOffset)
    {
        builder.AddOffset(2, NodeDatasOffset.Value, 0);
    }
    public static VectorOffset CreateNodeDatasVector(FlatBufferBuilder builder, Offset<NodeData>[] data)
    {
        builder.StartVector(4, data.Length, 4);

        for (int i = data.Length - 1; i >= 0; i--)
        {
            builder.AddOffset(data[i].Value);
        }

        return builder.EndVector();
    }
    public static void StartNodeDatasVector(FlatBufferBuilder builder, int numElems)
    {
        builder.StartVector(4, numElems, 4);
    }
    public static void AddInfo(FlatBufferBuilder builder, Offset<StringDictionary> InfoOffset)
    {
        builder.AddOffset(3, InfoOffset.Value, 0);
    }
    public static Offset<BeefMapObject> EndBeefMapObject(FlatBufferBuilder builder)
    {
        int o = builder.EndObject();
        return new Offset<BeefMapObject>(o);
    }
};


}
