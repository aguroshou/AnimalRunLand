// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace BeefDefine.FlatBufferSchema
{

using global::System;
using global::BeefDefine.FlatBuffers;

public struct NodeData : IFlatbufferObject
{
    private Table __p;
    public ByteBuffer ByteBuffer
    {
        get
        {
            return __p.bb;
        }
    }
    public static NodeData GetRootAsNodeData(ByteBuffer _bb)
    {
        return GetRootAsNodeData(_bb, new NodeData());
    }
    public static NodeData GetRootAsNodeData(ByteBuffer _bb, NodeData obj)
    {
        return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb));
    }
    public void __init(int _i, ByteBuffer _bb)
    {
        __p.bb_pos = _i;
        __p.bb = _bb;
    }
    public NodeData __assign(int _i, ByteBuffer _bb)
    {
        __init(_i, _bb);
        return this;
    }

    public string Id
    {
        get
        {
            int o = __p.__offset(4);
            return o != 0 ? __p.__string(o + __p.bb_pos) : null;
        }
    }
    public ArraySegment<byte>? GetIdBytes()
    {
        return __p.__vector_as_arraysegment(4);
    }
    public Position ? Pos
    {
        get
        {
            int o = __p.__offset(6);
            return o != 0 ? (Position ?)(new Position()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null;
        }
    }
    public StringDictionary ? Info
    {
        get
        {
            int o = __p.__offset(8);
            return o != 0 ? (StringDictionary ?)(new StringDictionary()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null;
        }
    }

    public static Offset<NodeData> CreateNodeData(FlatBufferBuilder builder,
            StringOffset IdOffset = default(StringOffset),
            Offset<Position> PosOffset = default(Offset<Position>),
            Offset<StringDictionary> InfoOffset = default(Offset<StringDictionary>))
    {
        builder.StartObject(3);
        NodeData.AddInfo(builder, InfoOffset);
        NodeData.AddPos(builder, PosOffset);
        NodeData.AddId(builder, IdOffset);
        return NodeData.EndNodeData(builder);
    }

    public static void StartNodeData(FlatBufferBuilder builder)
    {
        builder.StartObject(3);
    }
    public static void AddId(FlatBufferBuilder builder, StringOffset IdOffset)
    {
        builder.AddOffset(0, IdOffset.Value, 0);
    }
    public static void AddPos(FlatBufferBuilder builder, Offset<Position> PosOffset)
    {
        builder.AddOffset(1, PosOffset.Value, 0);
    }
    public static void AddInfo(FlatBufferBuilder builder, Offset<StringDictionary> InfoOffset)
    {
        builder.AddOffset(2, InfoOffset.Value, 0);
    }
    public static Offset<NodeData> EndNodeData(FlatBufferBuilder builder)
    {
        int o = builder.EndObject();
        return new Offset<NodeData>(o);
    }
};


}
