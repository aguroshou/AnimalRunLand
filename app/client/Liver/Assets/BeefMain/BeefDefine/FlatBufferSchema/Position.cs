// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace BeefDefine.FlatBufferSchema
{

using global::System;
using global::BeefDefine.FlatBuffers;

public struct Position : IFlatbufferObject
{
    private Table __p;
    public ByteBuffer ByteBuffer
    {
        get
        {
            return __p.bb;
        }
    }
    public static Position GetRootAsPosition(ByteBuffer _bb)
    {
        return GetRootAsPosition(_bb, new Position());
    }
    public static Position GetRootAsPosition(ByteBuffer _bb, Position obj)
    {
        return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb));
    }
    public void __init(int _i, ByteBuffer _bb)
    {
        __p.bb_pos = _i;
        __p.bb = _bb;
    }
    public Position __assign(int _i, ByteBuffer _bb)
    {
        __init(_i, _bb);
        return this;
    }

    public float EastLon
    {
        get
        {
            int o = __p.__offset(4);
            return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f;
        }
    }
    public float NorthLat
    {
        get
        {
            int o = __p.__offset(6);
            return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f;
        }
    }

    public static Offset<Position> CreatePosition(FlatBufferBuilder builder,
            float EastLon = 0.0f,
            float NorthLat = 0.0f)
    {
        builder.StartObject(2);
        Position.AddNorthLat(builder, NorthLat);
        Position.AddEastLon(builder, EastLon);
        return Position.EndPosition(builder);
    }

    public static void StartPosition(FlatBufferBuilder builder)
    {
        builder.StartObject(2);
    }
    public static void AddEastLon(FlatBufferBuilder builder, float EastLon)
    {
        builder.AddFloat(0, EastLon, 0.0f);
    }
    public static void AddNorthLat(FlatBufferBuilder builder, float NorthLat)
    {
        builder.AddFloat(1, NorthLat, 0.0f);
    }
    public static Offset<Position> EndPosition(FlatBufferBuilder builder)
    {
        int o = builder.EndObject();
        return new Offset<Position>(o);
    }
};


}
